{"version":3,"file":"tmlabs.min.js","sources":["../src/constant/endpoint.js","../src/TmLabs.js","../src/command/AbstractCommand.js","../src/command/FetchCommand.js","../src/Command.js","../src/index.js"],"sourcesContent":["/* eslint-disable import/extensions */\n\nexport const IP = 'ip';\nexport const PORT = 'port';\n","import * as Constants from './constant';\n\nexport default class TmLabs {\n  constructor(options) {\n    console.log('Constants', Constants);\n    console.log('Options', options);\n    if(options) {\n      try {\n        this.token = options.token;\n      } catch (e) {\n        console.error(e);\n      }\n    }\n  }\n  fetch = async (params) => {\n\n  }\n\n  doAction = async (command) => {\n\n  }\n\n  set token(token) {\n    if(!token) {\n      throw new Error(\"Token is empty!\");\n    }\n    this.token = token;\n  }\n  get token() {\n    return this.token;\n  }\n}\n","\nexport default class AbstractCommand {\n  constructor(action, params) {\n    if (new.target === AbstractCommand) {\n      throw new TypeError(\"Cannot construct AbstractCommand instance directly\");\n    }\n    if(!action) throw new ReferenceError(\"Empty action string\");\n    if(!params) throw new ReferenceError(\"Empty params object\");\n    this.action = action;\n    this.params = params;\n  }\n  set action(action) {\n    if(!action) {\n      throw new Error(\"Empty action\");\n    }\n    this.action = action;\n  }\n  get action() {\n    return this.action;\n  }\n  get params() {\n    return this.params;\n  }\n  set params(params) {\n    if(!params) {\n      throw new Error(\"Empty params\");\n    }\n    this.params = params;\n  }\n}\n","import AbstractCommand from './AbstractCommand';\n\nexport default class FetchCommand extends AbstractCommand{\n  constructor(params) {\n    super('fetch', params);\n  }\n  do() {\n\n  }\n}\n","import AbstractCommand from './command/AbstractCommand';\nimport FetchCommand from './command/FetchCommand';\n\nexport default class Command extends AbstractCommand{\n  constructor(action, params) {\n    super(action, params);\n    console.log('CLASS', this.class);\n  }\n  get class() {\n    switch (this.action) {\n      case 'fetch':\n        return new FetchCommand(this.params);\n      default:\n        throw new ReferenceError('Action not found');\n    }\n  }\n  do() {\n    console.log('command object', this.class);\n  }\n}\n","import TmLabs from './TmLabs';\nimport Command from './Command';\n\n//\nconst fetch = async (params) => {\n  const tmLabs = new TmLabs();\n  const answer = await tmLabs.doAction(new Command('fetch', params));\n  return answer;\n};\n//\nexport default TmLabs;\nexport { TmLabs, fetch }\n"],"names":["TmLabs","fetch","doAction","log","token","options","error","Error","AbstractCommand","new","target","TypeError","ReferenceError","action","params","FetchCommand","Command","class","tmLabs"],"mappings":"qOAEA,KAAA,qBAAkB,UACE,QADpB,8RAAA,+FAAA,iPAAA,4TAAA,wKAAA,CCAqBA,0BACE,8BAWrBC,iDAAQ,6HAXa,8DAerBC,oDAAW,6HAfU,iEACXC,IAAI,uBACJA,IAAI,kBAEN,MACGC,MAAQC,EAAQD,KADvB,CAEE,QAAU,SACFE,kDAYG,IACZ,QACK,IAAIC,MAAJ,CAAU,iBAAV,OAEHH,uBAEK,OACH,MAAKA,cD3BhB,CEDqBI,4BACS,cACtBC,IAAIC,MAAJD,UACI,IAAIE,UAAJ,CAAc,oDAAd,KAEL,GAAS,KAAM,IAAIC,eAAJ,CAAmB,qBAAnB,CAAN,IACT,GAAS,KAAM,IAAIA,eAAJ,CAAmB,qBAAnB,CAAN,MACPC,QANqB,MAOrBC,kDAEY,IACd,QACK,IAAIP,MAAJ,CAAU,cAAV,OAEHM,wBAEM,OACJ,MAAKA,qCAED,OACJ,MAAKC,uBAEK,IACd,QACK,IAAIP,MAAJ,CAAU,cAAV,OAEHO,iBFzBT,CGAqBC,2BACC,2EACZ,yDAEH,WHJP,CICqBC,6BACS,UAAA,qFAElBb,IAAI,QAAS,EAAKc,sDAUvB,SACKd,IAAI,iBAAkB,KAAKc,oCATzB,QACF,KAAKJ,YACN,cACI,OAAiB,KAAKC,MAAtB,eAED,IAAIF,eAAJ,CAAmB,kBAAnB,aJXd,CKEMX,6CAAQ,8GACG,eACMiB,EAAOhB,QAAPgB,CAAgB,MAAY,OAAZ,GAAhBA,sFAFjB,wDLFN"}